(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{296:function(n,s,a){"use strict";a.r(s);var t=a(13),e=Object(t.a)({},(function(){var n=this,s=n._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[s("h1",{attrs:{id:"函数柯里化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#函数柯里化"}},[n._v("#")]),n._v(" 函数柯里化")]),n._v(" "),s("h2",{attrs:{id:"一、柯里化的概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、柯里化的概念"}},[n._v("#")]),n._v(" 一、柯里化的概念")]),n._v(" "),s("p",[n._v("柯里化是指把接收多个参数的函数变换成接收单一参数的函数，嵌套返回直到所有参数都被使用并返回最终结果。更简单地说，柯里化是一个函数变换的过程，是将函数从调用方式：f(a,b,c)变换成调用方式：f(a)(b)(c)的过程。柯里化不会调用函数，它只是对函数进行转换。\n举个栗子")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("function add(x, y, z) {\n  return x + y + z;\n}\nconsole.log(add(1, 2, 3)); // 6\nvar add = function(x) {\n  return function(y) {\n    return function(z) {\n      return x + y + z;\n    }\n  }\n}\nvar add1 = add(1);\nvar add2 = add1(2);\nvar add3 = add2(3);\nconsole.log(add3);\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br")])]),s("p",[n._v("这里我们定义了一个add函数，它接受一个参数并返回一个新的函数。调用add之后，返回的函数就通过闭包的方式记住了add的第一个参数。")]),n._v(" "),s("h2",{attrs:{id:"二、偏函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、偏函数"}},[n._v("#")]),n._v(" 二、偏函数")]),n._v(" "),s("p",[n._v("其实柯里化函数就是偏函数的其中一种应用，偏函数是指固定多元函数的部分参数，并返回一个可以接受剩余部分参数的函数的转换过程。JavaScript开发过程中，有一个很常用的函数就是我们所谓的偏函数bind！！！")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("function add(a, b, c) {\n  return a+b+c;\n}\nvar getResult = add.bind(this, 1, 2);\ngetResult(3)\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br")])]),s("h2",{attrs:{id:"三、偏函数-partial-application-与-柯理化-currying-的异同"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三、偏函数-partial-application-与-柯理化-currying-的异同"}},[n._v("#")]),n._v(" 三、偏函数(Partial Application) 与 柯理化(Currying)的异同")]),n._v(" "),s("p",[n._v("1、它们都是高阶函数（一个函数就可以接收另一个函数作为参数，这种函数就称之为高阶函数）\n2、它们都是把多元函数转换成更低元的函数\n3、都是减少重复传参，提高函数的适用性\n4、偏函数只返回一次接受剩余参数的函数，柯理化会追溯到所有参数补齐才会真正执行\n5、柯理化就是自动化的偏函数应用")]),n._v(" "),s("h2",{attrs:{id:"四、柯里化的用处"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#四、柯里化的用处"}},[n._v("#")]),n._v(" 四、柯里化的用处")]),n._v(" "),s("h3",{attrs:{id:"_1-延迟计算"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-延迟计算"}},[n._v("#")]),n._v(" 1.延迟计算")]),n._v(" "),s("p",[n._v("这个很简单，柯里化函数可以把一个函数分成好几步去执行，这样开发者想什么时候执行下一步就什么时候执行")]),n._v(" "),s("h3",{attrs:{id:"_2-参数复用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-参数复用"}},[n._v("#")]),n._v(" 2.参数复用")]),n._v(" "),s("p",[n._v("这里举个栗子\n假设现在有个商家在做打折促销活动，店里所有商品一律九折，那么最后每件商品的价格就是这么算的")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("function discount(originPrize, discountNum){\n  return originPrize* discountNum;\n}\n// 顾客买了20块钱苹果，那么价格就是\ndiscount(20, 0.9);\n// 顾客买了30块钱梨，那么价格就是\ndiscount(30, 0.9);\n// 我们会发现0.9这个参数都是一样的，那么我们可以这么写，写一个打九折的基础函数，只需要传入价格就可以了\nfunction discount9(originPrize) {\n  return discount(originPrize, 0.9)\n}\n// 最后只需要通过这样就可以算出价格\ndiscount9(20);\ndiscount9(30);\n// 这样的话假设哪一天商场想打八折，容易，再创建一个打八折的基础函数，照样可以很方便地算出价格\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br")])]),s("h3",{attrs:{id:"_3-动态生成函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-动态生成函数"}},[n._v("#")]),n._v(" 3.动态生成函数")]),n._v(" "),s("p",[n._v("这里举一个实际例子。我们都知道为了兼容IE和其他浏览器的添加事件方法，通常会以下面代码进行兼容行处理：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("const addEvent = (ele, type, fn, capture) => {\n\tif (window.addEventListener) {\n\t\tele.addEventListener(type, (e) => fn.call(ele, e), capture);\n\t} else if (window.attachEvent) {\n\t\tele.attachEvent('on'+type, (e) => fn.call(ele, e));\n\t}\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br")])]),s("p",[n._v("这里会有一个问题，就是在每一次绑定事件的时候，都需要一次环境的判断，再去进行绑定，如果我们将上面的函数进行柯里化，就能规避这个问题，在使用前是做一次判断即可。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("const addEvent = (function() {\n\tif (window.addEventListener) {\n\t\treturn function(ele) {\n\t\t\treturn function(type) {\n\t\t\t\treturn function(fn) {\n\t\t\t\t\treturn function(capture) {\n\t\t\t\t\t\tele.addEventListener(type, (e) => fn.call(ele, e), capture);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} else if (window.attachEvent) {\n\t\treturn function(ele) {\n\t\t\treturn function(type) {\n\t\t\t\treturn function(fn) {\n\t\t\t\t\treturn function(capture) {\n\t\t\t\t\t\tele.addEventListener(type, (e) => fn.call(ele, e), capture);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n})();\n// 调用\naddEvent(document.getElementById('app'))('click')((e) => {console.log('click function has been call:', e);})(false);\n// 分步骤调用会更加清晰\nconst ele = document.getElementById('app');\n// get environment\nconst environment = addEvent(ele)\n// bind event\nenvironment('click')((e) => {console.log(e)})(false);\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br")])]),s("p",[n._v("利用柯里化的函数可以实现动态的生成不同的函数。实际场景这些代码还可以进行优化")]),n._v(" "),s("h2",{attrs:{id:"五、偏函数实现原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#五、偏函数实现原理"}},[n._v("#")]),n._v(" 五、偏函数实现原理")]),n._v(" "),s("p",[n._v("首先，偏函数也是一个高阶函数，其实现符合高阶函数的模型：\n它需要一个函数作为第一个参数，并且返回值也是一个函数")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("function partial(fn){\n    return function restFn(){\n        // ...\n    }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br")])]),s("p",[n._v("其次，偏函数创建时可以固定部分参数，也即除第一个参数fn以外的参数，都是预置参数。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("function partial(fn){\n    var args = [].slice.call(arguments,1)\n    return function restFn(){\n        // ...\n    }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br")])]),s("p",[n._v("最后，接受剩余参数，并和预置参数整合，作为fn的参数执行应用。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("function partial(fn){\n    var args = [].slice.call(arguments,1)\n    return function(){\n        var rest = [].slice.call(arguments)\n        return fn.apply(null, args.concat(rest))\n    }\n}\n// 使用方式\nvar add=partial((a,b)=>{return a+b},1)\nadd(3)\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br")])]),s("h2",{attrs:{id:"六、如何将普通的函数变成柯里化的函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#六、如何将普通的函数变成柯里化的函数"}},[n._v("#")]),n._v(" 六、如何将普通的函数变成柯里化的函数")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("// 柯里化函数\nconst curry = function (fn) {\n    return function nest(...args) {\n        if (args.length === fn.length) {\n            // 最后所有的参数接收完毕才调用初始函数\n            return fn(...args);\n        } else {\n            return function (arg) {\n                return nest(...args, arg);\n            }\n        }\n    }\n}\n最后这个柯里化函数是这么使用的\nfunction addNum(a, b, c) {\n    return a + b + c;\n}\nconst addCurry = curry(addNum);\naddCurry(1)(2)(3);// 6\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br")])]),s("p",[n._v("这个curry函数我们可以这么理解，先看看最后它是怎么使用的，反推出curry的实现逻辑\n调用curry函数（函数的参数是需要转换的原始函数），返回一个柯里化的函数，所以我们知道curry函数返回的一定是柯里化个函数（一个可以这样的函数a()()()……），所以我们先整理出第一步")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("const curry = function (fn) {\n    return function nest() {\n    }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br")])]),s("p",[n._v("第二步，如果还没调用到最后一个参数，那么这时候会一直返回柯里化的函数（这个柯里化函数的特点就是传参只有一个，但是还是返回一样的柯里化函数），以供最后一次调用的使用，这里肯定会用到递归，那么这个递归要怎么写呢？")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("const curry = function (fn) {\n    // 这一步已经到了curry(addNum);的返回值\n    return function nest(arg) {\n        // 下一次调用会走这里，所以返回一个柯里化函数，只接受一个参数，并且返回柯里化函数\n        return nest(arg)\n    }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br")])]),s("p",[n._v("怎么看起来有点奇怪？是的，递归的话，需要有个终止条件，这里我先说终止条件是什么，就是当柯里化函数调用的次数与原始函数参数个数一样的时候，会终止递归，然后一次性调用原始函数，那么这样的话，我们肯定要存储之前每一次传进来的参数")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("function curry(fn){\n    const args =[];\n    return function nest(arg){\n        args.push(arg);\n        if(args.length===fn.length){\n           return fn(...args)\n        }else{\n            return nest\n        }\n    }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br")])]),s("p",[n._v("第三步，简化。args其实是可以省略的，我们可以用nest的形参来存储之前所有传进来的参数")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("const curry = function (fn) {\n    return function nest(...args) {\n        if (args.length === fn.length) {\n            return fn(...args);\n        } else {\n            return function (arg) {\n                // 这里通过function（arg）再包一层\n                return nest(...args, arg);\n            }\n        }\n    }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br")])])])}),[],!1,null,null,null);s.default=e.exports}}]);