(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{277:function(s,e,n){"use strict";n.r(e);var a=n(13),r=Object(a.a)({},(function(){var s=this,e=s._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"babel相关"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#babel相关"}},[s._v("#")]),s._v(" Babel相关")]),s._v(" "),e("h2",{attrs:{id:"一、babel是什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一、babel是什么"}},[s._v("#")]),s._v(" 一、babel是什么")]),s._v(" "),e("p",[s._v("babel是一个JavaScript转换器")]),s._v(" "),e("p",[s._v("一些比较新颖的JavaScript语法无法在老旧的浏览器上面运行，所以babel可以把这些语法转换成旧版本浏览器可以执行的代码，简而言之")]),s._v(" "),e("ol",[e("li",[s._v("语法转换")]),s._v(" "),e("li",[s._v("通过polyfill方式在目标环境中添加缺失的属性（通过第三方polyfill模块，例如core-js等实现")]),s._v(" "),e("li",[s._v("源码转换")])]),s._v(" "),e("h2",{attrs:{id:"二、babel如何配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二、babel如何配置"}},[s._v("#")]),s._v(" 二、babel如何配置")]),s._v(" "),e("p",[s._v("babel是通过配置文件进行配置的，eslint和prettier也有类似的配置文件分别为.eslintrc，.prettierrc")]),s._v(" "),e("p",[s._v("babel有babel.config.json和.babelrc.json")]),s._v(" "),e("p",[s._v(".babelrc.json这种方式和直接在package.json的babel字段直接设置的效果是一样的，只会影响本项目中的代码")]),s._v(" "),e("p",[s._v("babel.config.json会影响整个项目中的代码，包含node_modules中的代码")]),s._v(" "),e("p",[s._v("推荐使用babel.config.json格式配置文件")]),s._v(" "),e("h2",{attrs:{id:"三、babel配置两个主要的的配置项plugin和preset"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三、babel配置两个主要的的配置项plugin和preset"}},[s._v("#")]),s._v(" 三、babel配置两个主要的的配置项plugin和preset")]),s._v(" "),e("p",[s._v("plugin和preset，这两者的区别是什么呢？")]),s._v(" "),e("p",[s._v("babel插件一般尽可能拆成小的力度，比如一个promise，或者一个weakmap的低版本浏览器兼容polyfill，都是被写成单独的一个插件，开发者可以按需引进，这样的好处显而易见，提高了性能，也提高了扩展性，但是我们在开发的时候，总没有办法说，我在项目代码里面到底有多少个新的js语法被使用，然后一个个的去引入polyfill吧。所以就出现了preset这种东西，有开发者发现了这个问题，所以就写了一些preset，可以理解为babel plugin的集合（也就是先把一些常用的plugin给你打包在一块了），现在市面上有好几种babel preset，他们可以大致满足不同的项目（vue的项目或者react的项目）需求")]),s._v(" "),e("p",[s._v("官方已经针对常用的环境编写了一些预设")]),s._v(" "),e("ul",[e("li",[s._v("@babel/reset-env for compiling ES2015 + syntax")]),s._v(" "),e("li",[s._v("@babel/preset-typescript for TypeScript")]),s._v(" "),e("li",[s._v("@babel/preset-react for React")]),s._v(" "),e("li",[s._v("@babel/preset-flow for Flow")])]),s._v(" "),e("h2",{attrs:{id:"四、plugin和preset的执行顺序"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#四、plugin和preset的执行顺序"}},[s._v("#")]),s._v(" 四、plugin和preset的执行顺序")]),s._v(" "),e("p",[s._v("可以同时使用多个plugin和preset，此时，它们的执行顺序非常重要")]),s._v(" "),e("ol",[e("li",[s._v("先执行完所有的plugin，再执行preset")]),s._v(" "),e("li",[s._v("多个plugin，按照声明次序顺序执行")]),s._v(" "),e("li",[s._v("多个preset，按照声明次序逆序执行")])]),s._v(" "),e("h2",{attrs:{id:"五、babel转译方案"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#五、babel转译方案"}},[s._v("#")]),s._v(" 五、babel转译方案")]),s._v(" "),e("h3",{attrs:{id:"_1-babel-preset-env-babel-polyfill-升级前"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-babel-preset-env-babel-polyfill-升级前"}},[s._v("#")]),s._v(" 1.@babel/preset-env+@babel/polyfill（升级前）")]),s._v(" "),e("p",[s._v("@babel/preset-env+@babel/polyfill可以完全实现ES基础语法的转译+新API的转译，这是配置babel转码的第一种方式")]),s._v(" "),e("p",[s._v("基本的语法转换，需要添加预设@babel/preset-env")]),s._v(" "),e("p",[s._v("①安装依赖包")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("yarn add @babel/preset-env -D\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("②添加配置")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('{\n  "presets": [\n    [\n       "@babel/preset-env",\n       {\n         "modules": false, // 对ES6的模块文件不做转化，以便使用tree shaking、sideEffects等\n       }\n    ]\n  ],\n  "plugins": []\n}\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br")])]),e("p",[s._v("babel默认只转换新的JavaScript语法（@babel/preset-env默认只转换新的JavaScript语法，比如const和箭头函数,rest运算符），而不转换新的API，比如Iterator、Generator、Set、Maps、Proxy、Reflect、Symbol、Promise等全局对象，以及一些定义在全局对象上的方法（比如Object.assign）都不会转码。")]),s._v(" "),e("p",[s._v("转译新的API，需要借助polyfill方案去解决，使用@babel/polyfill或@babel/plugin-transform-runtime，二选一即可。")]),s._v(" "),e("p",[s._v("@babel/polyfill还是@babel/plugin-transform-runtime?")]),s._v(" "),e("p",[s._v("本质上@babel/polyfill是core-js库的别名，随着core-js@3的更新，@babel/polyfill无法从2过度到3，所以@babel/polyfill已经被放弃，这里只是为了讲解，现在升级到core-js3后都不用这个@babel/polyfill")]),s._v(" "),e("p",[s._v("①安装依赖包")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("yarn add @babel/polyfill -S\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("②.babelrc 文件写上配置，@babel/polyfill 不用写入配置，会根据useBuiltIns参数去决定如何被调用。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('{\n  "presets": [\n    [\n      "@babel/preset-env",\n      {\n        "useBuiltIns": "entry",\n        "modules": false,\n        "corejs": 2, // 新版本的@babel/polyfill包含了core-js@2和core-js@3版本，所以需要声明版本，否则webpack运行时会报warning，此处暂时使用core-js@2版本（末尾会附上@core-js@3怎么用）\n      }\n    ]\n  ]\n}\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br")])]),e("p",[s._v("③配置参数")]),s._v(" "),e("p",[s._v('(1)modules，"amd" | "umd" | "systemjs" | "commonjs" | "cjs" | "auto" | false，默认值是 auto。')]),s._v(" "),e("p",[s._v("用来转换 ES6 的模块语法。如果使用 false，将不会对文件的模块语法进行转化。")]),s._v(" "),e("p",[s._v("如果要使用 webpack 中的一些新特性，比如 tree shaking 和 sideEffects，就需要设置为 false，对 ES6 的模块文件不做转化，因为这些特性只对 ES6 的模块有效。")]),s._v(" "),e("p",[s._v('(2)useBuiltIns，"usage" | "entry" | false，默认值是 false。')]),s._v(" "),e("p",[s._v("false：需要在 js 代码第一行主动 import '@babel/polyfill'，会将@babel/polyfill 整个包全部导入。")]),s._v(" "),e("p",[s._v("（不推荐，能覆盖到所有 API 的转译，但体积最大）")]),s._v(" "),e("p",[s._v("(3)entry：需要在 js 代码第一行主动 import '@babel/polyfill'，会将 browserslist 环境不支持的所有垫片都导入。")]),s._v(" "),e("p",[s._v("（能够覆盖到‘hello‘.includes(‘h‘)这种句法，足够安全且代码体积不是特别大）")]),s._v(" "),e("p",[s._v("usage：项目里不用主动 import，会自动将代码里已使用到的、且 browserslist 环境不支持的垫片导入。")]),s._v(" "),e("p",[s._v("（但是检测不到‘hello‘.includes(‘h‘)这种句法，对这类原型链上的句法问题不会做转译，书写代码需注意）")]),s._v(" "),e("p",[s._v("其实学到这里的时候，我对useBuiltIns和corejs属性是有混淆的，corejs 参数仅仅是指定使用哪个版本的，并未导入。怎样导入，导入哪些，是否需要手动 import，由 useBuiltIns 参数决定。所以useBuiltIns为entry并且手动在文件里面导入@babel/polyfill的时候，corejs属性无论怎么设置都是没用的")]),s._v(" "),e("p",[s._v("core-js@3 的更新，带来了新的变化，@babel/polyfill 无法提供 core-js@2 向 core-js@3 过渡，所以现在有新的方案去替代 @babel/polyfill。需要 babel-loader 版本升级到 8.0.0 以上，@babel/core 版本升级到 7.4.0 及以上。")]),s._v(" "),e("p",[s._v("上面说到@babel/polyfill在升级之后已经被抛弃，现在@babel/polyfill 不必再安装，转而需要依靠 core-js 和 regenerator-runtime")]),s._v(" "),e("p",[s._v("在useBuiltIns为entry或者false的时候")]),s._v(" "),e("p",[s._v("安装依赖")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("yarn add core-js regenerator-runtime\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("js代码里取代原先的import '@babel/polyfill'，做如下修改：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('import "core-js/stable"\nimport "regenerator-runtime/runtime"\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("h3",{attrs:{id:"_2-babel-preset-env-babel-plugin-transform-runtime-babel-runtime-corejs2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-babel-preset-env-babel-plugin-transform-runtime-babel-runtime-corejs2"}},[s._v("#")]),s._v(" 2.@babel/preset-env + @babel/plugin-transform-runtime + @babel/runtime-corejs2")]),s._v(" "),e("p",[s._v("@babel/preset-env + @babel/plugin-transform-runtime 搭配使用，可以完成基本语法转译 + ES 新语法的按需加载，这是配置 Babel 转码的第二种方式。@babel/preset-env 也因 core-js@3 的原因，需要配置 corejs 参数去指定使用的corejs 版本，否则 webpack 运行时会报 warning")]),s._v(" "),e("p",[s._v("①安装依赖包")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("yarn add @babel/plugin-transform-runtime -D\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("PS：")]),s._v(" "),e("p",[s._v("(1)如果配置参数 corejs 未设置或为 false，需安装依赖@babel/runtime（这部分代码会被抽离并打包到应用 js 里，所以可以安装在 dependencies 里），仅对 es6 语法转译，而不对新 API 转译。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("yarn add @babel/runtime\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("(2)如果配置参数 corejs 设置为 2，需安装依赖@babel/runtime-corejs2（同上，推荐安装在 dependencies 里。），对语法、新 API 都转译。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("yarn add @babel/runtime-corejs2\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("(3)推荐使用corejs:2，但是，检测不到‘hello‘.includes(‘h‘)这种句法，所以存在一定隐患，书写代码时需注意。\n(4)@babel/runtime 和 @babel/runtime-corejs2 这两个库唯一的区别是：corejs2 这个库增加了对 core-js（用来对 ES6 各个语法 polyfill 的库）这个库的依赖，所以在 corejs 为 false 的情况下，只能做语法的转换，并不能 polyfill 任何新 API。")]),s._v(" "),e("p",[s._v("②.babelrc 文件写上配置")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('{\n  "presets": [\n    [\n      "@babel/preset-env",\n      {\n        "modules": false\n      }\n    ]\n  ],\n  "plugins": [\n    [\n      "@babel/plugin-transform-runtime",\n      {\n        "corejs": 2 // 推荐\n      }\n    ]\n  ]\n}\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br")])]),e("p",[s._v("③配置参数")]),s._v(" "),e("p",[s._v("(1)corejs，默认值是 false，只对语法进行转换，不对新 API 进行处理；当设置为 2 的时候，需要安装@babel/runtime-corejs2，这时会对 api 进行处理。\n(2)helpers，默认值是 true，用来开启是否使用 helper 函数来重写语法转换的函数。\n(3)useESModules，默认值是 false，是否对文件使用 ES 的模块语法，使用 ES 的模块语法可以减少文件的大小。、")]),s._v(" "),e("p",[s._v("这种方式的升级方案直接把corejs的2改成3就可以了")]),s._v(" "),e("h2",{attrs:{id:"六、-babel-polyfill和-babel-plugin-transform-runtime两种方案有什么区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#六、-babel-polyfill和-babel-plugin-transform-runtime两种方案有什么区别"}},[s._v("#")]),s._v(" 六、@babel/polyfill和@babel/plugin-transform-runtime两种方案有什么区别")]),s._v(" "),e("p",[s._v("首先要确认，@babel/polyfill和@babel/plugin-transform-runtime各自都可以完成ES新API的转译，ES新语法只是由@babel/preset-env完成转译，所以@babel/polyfill、@babel/plugin-transform-runtime都需各自搭配@babel/preset-env一起使用。")]),s._v(" "),e("p",[s._v("到这不知道大家有没有发现一个问题，就是如果已经在preset 中使用core-js@3进行 polyfill，那么transform-runtime有没有必要安装@babel/runtime-corejs3开启corejs选项？core-js@3和@babel/runtime-corejs3有何差别？")]),s._v(" "),e("p",[s._v("已经在 @babel/preset-env 中配置了polyfill，那么你连 @babel/plugin-transform-runtime 都是不必要的（他们二者都可以提供ES新API的垫片，在这一项功能上是重复的。@babel/preset-env 除了提供 polyfill 垫片，还提供 ES 新语法的转译，这一点 @babel/plugin-transform-runtime 做不了；@babel/preset-env 提供的polyfill垫片会污染原型链，这个既是缺点，也是优点，缺点是在开发第三方 JS 库时不能这么干，会影响使用方的代码，优点是在开发自己的web应用时，一劳永逸，而 @babel/plugin-transform-runtime 不会污染原型链，且按需加载；@babel/preset-env 在提供 polyfill 垫片时，是既可以按需也可以不按需，取决于使用者怎么配置 useBuiltIns 参数及是否 import 了垫片），简单推荐一下：@babel/preset-env 可以搞定你的所有事情，配置 useBuiltIns 并按规则导入 polyfill，不必使用 @babel/plugin-transform-runtime；如果是开发 js 库，才用 @babel/plugin-transform-runtime，同时使用 @babel/preset-env 去转译语法，但不用它的 polyfill。")]),s._v(" "),e("p",[s._v("上面提到@babel/preset-env提供的polyfill垫片会污染原型链，@babel/plugin-transform-runtime不会，我做了一个实验")]),s._v(" "),e("p",[s._v("我直接用babel提供的@babel/cli编译js文件，用webpack+babel-loader打包出来的文件会大很多，因为webpack会重写require等导入导出方法")]),s._v(" "),e("p",[s._v("实验一：")]),s._v(" "),e("p",[s._v("我们直接用@babel/cli编译index.js文件")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("const a = new Promise((resolve) => {\n  resolve();\n}).then(() => {\n  console.log(1);\n});\nclass A {\n  constructor() {}\n  name() {}\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br")])]),e("p",[s._v("配置为")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('{\n    "presets": [],\n    "plugins": []\n}\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("p",[s._v("编译后index.js文件没变，因为没有@babel/preset-env进行编译")]),s._v(" "),e("p",[s._v("实验二：")]),s._v(" "),e("p",[s._v("配置改为")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('{\n    "presets": ["@babel/preset-env"],\n    "plugins": []\n}\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("p",[s._v("编译出来是这样的")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('"use strict";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n\nvar a = new Promise(function (resolve) {\n  resolve();\n}).then(function () {\n  console.log(1);\n});\n\nvar A = /*#__PURE__*/function () {\n  function A() {\n    _classCallCheck(this, A);\n  }\n\n  _createClass(A, [{\n    key: "name",\n    value: function name() {}\n  }]);\n\n  return A;\n}();\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br")])]),e("p",[s._v("因为@babel/preset-env进行语法编译了，所以箭头函数、const和class都被编译成ES5语法，但是没有使用polyfill进行新API的编译，所以promise就没有被编译")]),s._v(" "),e("p",[s._v("实验三：")]),s._v(" "),e("p",[s._v("配置改为")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('{\n    "presets": [\n        [\n            "@babel/preset-env",\n            {\n                "useBuiltIns": "usage",\n                "corejs": 3\n            }\n        ]\n    ],\n    "plugins": []\n}\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br")])]),e("p",[s._v("编译出来是这样的")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('"use strict";\n\nrequire("core-js/modules/es.object.define-property.js");\n\nrequire("core-js/modules/es.object.to-string.js");\n\nrequire("core-js/modules/es.promise.js");\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n\nvar a = new Promise(function (resolve) {\n  resolve();\n}).then(function () {\n  console.log(1);\n});\n\nvar A = /*#__PURE__*/function () {\n  function A() {\n    _classCallCheck(this, A);\n  }\n\n  _createClass(A, [{\n    key: "name",\n    value: function name() {}\n  }]);\n\n  return A;\n}();\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br")])]),e("p",[s._v("直接通过@babel/preset-env+polyfill编译出来的文件有下面两个问题：")]),s._v(" "),e("p",[s._v("1.promise用导入的es.promise.js重写了。babel 的 polyfill 机制是，对于例如 Array.from 等静态方法，直接在 global.Array 上添加；对于例如 includes 等实例方法，直接在 global.Array.prototype 上添加。这样直接修改了全局变量的原型，有可能会带来意想不到的问题。这个问题在开发第三方库的时候尤其重要，因为我们开发的第三方库修改了全局变量，有可能和另一个也修改了全局变量的第三方库发生冲突，或者和使用我们的第三方库的使用者发生冲突。公认的较好的编程范式中，也不鼓励直接修改全局变量、全局变量原型。")]),s._v(" "),e("p",[s._v("2.babel 转译 syntax 时，有时候会使用一些辅助的函数来帮忙转，例如我们用class方式写类的时候，babel 自定义了 _classCallCheck这个函数来辅助；typeof 则是直接重写了一遍，自定义了 _typeof 这个函数来辅助。这些函数叫做 helpers。从上图中可以看到，helper 直接在转译后的文件里被定义了一遍。如果一个项目中有100个文件，其中每个文件都写了一个 class，那么这个项目最终打包的产物里就会存在100个 _classCallCheck 函数，他们的长相和功能一模一样，这显然不合理。")]),s._v(" "),e("p",[s._v("实验四：")]),s._v(" "),e("p",[s._v("实验四可以完善上面说到的两个问题，因为@babel/plugin-transform-runtime不会污染原型链，同时它的配置项helpers属性可以解决多个文件多个helper的问题")]),s._v(" "),e("p",[s._v("配置改为")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('{\n    "presets": ["@babel/preset-env"],\n    "plugins": [\n        [\n            "@babel/plugin-transform-runtime",\n            {\n                "corejs": 3,\n                "helpers": true,\n            }\n        ],\n    ]\n}\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br")])]),e("p",[s._v("编译出来是这样的")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('"use strict";\n\nvar _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");\n\nvar _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/classCallCheck"));\n\nvar _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/createClass"));\n\nvar _promise = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/promise"));\n\n\nvar a = new _promise.default(function (resolve) {\n  resolve();\n}).then(function () {\n  console.log(1);\n});\n\nvar A = /*#__PURE__*/function () {\n  function A() {\n    (0, _classCallCheck2.default)(this, A);\n  }\n\n  (0, _createClass2.default)(A, [{\n    key: "name",\n    value: function name() {}\n  }]);\n  return A;\n}();\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br")])]),e("p",[s._v("从上面可以看到，在引入了 transform-runtime 这个插件后：")]),s._v(" "),e("p",[s._v("api 从之前的直接修改原型改为了从一个统一的模块中引入，避免了对全局变量及其原型的污染，解决了第一个问题\nhelpers 从之前的原地定义改为了从一个统一的模块中引入，使得打包的结果中每个 helper 只会存在一个，解决了第二个问题。")]),s._v(" "),e("h2",{attrs:{id:"七、真实情况下如何抉择"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#七、真实情况下如何抉择"}},[s._v("#")]),s._v(" 七、真实情况下如何抉择")]),s._v(" "),e("p",[s._v("如果不是开发库，可以干脆不装 @babel/plugin-transform-runtime 只使用 @babel/preset-env 就够了。那么如果是开发库，需要同时安装 @babel/plugin-transform-runtime 和 @babel/preset-env，但 polyfill 的事情交给 @babel/plugin-transform-runtime来处理。在开发库的时候不能直接只用@babel/cli转译文件，还需要配合webpack等打包工具，因为只用@babel/cli转译文件的话，编译出来的文件会有require或者类似import这种浏览器还无法执行的内置方法，打包工具在打包的时候会用闭包的形式重新实现这些方法，达到兼容。")]),s._v(" "),e("p",[s._v("​")])])}),[],!1,null,null,null);e.default=r.exports}}]);